https://computingforgeeks.com/install-docker-desktop-on-ubuntu

Info vm.overcommit_memory = 1: https://medium.com/@akhshyganesh/redis-enabling-memory-overcommit-is-a-crucial-configuration-68dbb77dae5f

~https://docs.docker.com/reference/cli/docker
~https://github.com/pnowy/docker-course/blob/main/komendy.txt

``Docker
`sudo systemctl status containerd
`sudo systemctl status docker

docker run hello-world

`docker info
`docker compose version
`docker-compose version
`docker version
`docker --version

`docker context ls
docker context use default
docker context use desktop-linux
docker context inspect default / desktop-linux

docker login
docker logout

docker search ubuntu
`docker system df
`docker images
`docker image -a
`docker ps -a (--all)
`docker container ls -a
`docker volume ls


`docker container run --publish 8080:80 nginx / docker run --publish 8080:80 nginx -> new/old command (8080 localhost, 80 nginx)
docker run busybox ls -l
docker run busybox echo Hi there!

`docker start <container ID> !is used to start existing stopped containers that were previously created with docker run or a similar command!
docker logs <container ID>
`docker stop <container ID> / docker container stop <container ID> 
docker kill <container ID>
docker container rm <container ID> (-f)
`docker rm -f <container ID>
docker container logs <container ID>
`docker container start -ai <container ID>


docker push <dockerHubID/repoName> (push to DockerHub)

`docker system prune -a -> remove all unused containers, networks, images (both dangling and unused), and optionally, volumes.
`docker volume prune
`docker system prune --volumes -a

docker exec -it <container id> <command> (sh/bash) -> -it = -i -t

`docker build .
`docker build -f Dockerfile.dev .
`docker run  (-d) <container ID>  eg: docker run (-d) 2e8d6b04b8d7 -> -d - detach (in the background)
docker build < -t dockerHubID/repoName:latest > .

`docker run -p 5000:5000 <image ID> !is used to create and start new containers based on Docker images!
`docker run -p 3000:3000 -v /app/node_modules -v "$(pwd):/app" <image ID>
e.g. docker run -d -p 3000:3000 -v /app/node_modules -v "$(pwd):/app" --name dockerized-react-app react-docker-app-1
docker exec -it <container ID> sh (-i -> interactive -t -> terminal)
`docker container exec -it <container ID> <command>

docker container top <container ID>
docker container inspect <container ID>
`docker container stats

`docker network ls
docker network inspect bridge
docker network create --driver=bridge skynet
docker container run -d --network skynet nginx
docker network connect <network name> <container ID>
docker network disconnect <network name> <container ID>
docker network rm <network name>

`docker image pull nginx
docker image pull ubuntu
docker image history ubuntu:latest
docker image inspect ubuntu
docker image rm ubuntu

docker buildx inspect --bootstrap
docker buildx version

VOLUMES
docker container run -d -p 3000:3000 --mount 'src=8ca2ef8645bd40700db261f29176d3b1502bd1b40ee7127d62987c0398b7819c,dst=/appdata' nodesave
docker container run -d -p 3000:3000 -v 8ca2ef8645bd40700db261f29176d3b1502bd1b40ee7127d62987c0398b7819c:/appdata nodesave
docker container run -d -p 3000:3000 --mount 'src=nodesave-data,dst=/appdata' nodesave

DOCKER SECURITY
docker run -d --name ubuntu-root ubuntu:20.04 sleep 100
docker exec ubuntu-root ps aux
docker run -d --name ubuntu-no-root --user=1000 ubuntu:20.04 sleep 100
docker exec ubuntu-no-root ps aux

`docker scout version

trivy image ubuntu:23.04 -> external tool
trivy image ubuntu:23.04 --severity=HIGH,CRITICAL -> external tool

DOCKER COMPOSE
`docker-compose --version
`docker-compose up
docker-compose up -d
docker-compose up --wait
docker-compose up --build
docker-compose up --build --remove-orphans
`docker-compose down
docker compose down -> V2
`docker-compose ps
docker-compose stop

docker run <container Id> npm run test

docker container prune -> removes all containers

`docker init


``Kubernetes
`minikube version
minikube status
minikube start
minikube stop
minikube delete
minikube start â€” driver=docker
minikube addons list
minikube dashboard
minikube profile list

kubectl version --client
kubectl version -o yaml
`kubectl version
kubectl cluster-info
kubectl get nodes

kubectl apply -f <file.yaml>
kubectl delete -f <file.yaml>
kubectl get <pods / services / deployments>
kubectl get pods -o wide
kubectl delete <deployment / service> <name>
minikube ip

kubectl describe <type eg pod> <name>

kubectl set image <object type>/<object name> <container name=new full container name> 

minikube docker-env

kubectl logs <name>

kubectl get storageclass
kubectl describe storageclass

kubectl create secret generic pgpassword --from-literal POSTGRES_PASSWORD=qawsed123
kubectl get secrets

minikube addons enable ingress
minikube addons disable ingress


skaffold version
